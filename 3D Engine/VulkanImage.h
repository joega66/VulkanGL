#pragma once
#include "GLImage.h"
#include <vulkan/vulkan.h>
#include <unordered_map>

const Map<EImageFormat, VkFormat> VulkanFormat =
{
	ENTRY(IF_UNDEFINED, VK_FORMAT_UNDEFINED)
	ENTRY(IF_R8G8_UINT, VK_FORMAT_R8_UINT)
	ENTRY(IF_R8G8_SINT, VK_FORMAT_R8_SINT)
	ENTRY(IF_R8_SRGB, VK_FORMAT_R8_SRGB)
	ENTRY(IF_R8G8_UINT, VK_FORMAT_R8G8_UINT)
	ENTRY(IF_R8G8_SINT, VK_FORMAT_R8G8_SINT)
	ENTRY(IF_R8G8_SRGB, VK_FORMAT_R8G8_SRGB)
	ENTRY(IF_R8G8B8_UINT, VK_FORMAT_R8G8B8_UINT)
	ENTRY(IF_R8G8B8_SINT, VK_FORMAT_R8G8B8_SINT)
	ENTRY(IF_R8G8B8_SRGB, VK_FORMAT_R8G8B8_SRGB)
	ENTRY(IF_B8G8R8_UINT, VK_FORMAT_B8G8R8_UINT)
	ENTRY(IF_B8G8R8_SINT, VK_FORMAT_B8G8R8_SINT)
	ENTRY(IF_B8G8R8_SRGB, VK_FORMAT_B8G8R8_SRGB)
	ENTRY(IF_R8G8B8A8_UINT, VK_FORMAT_R8G8B8A8_UINT)
	ENTRY(IF_R8G8B8A8_SINT, VK_FORMAT_R8G8B8A8_SINT)
	ENTRY(IF_R8G8B8A8_SRGB, VK_FORMAT_R8G8B8A8_SRGB)
	ENTRY(IF_R8G8B8A8_UNORM, VK_FORMAT_R8G8B8A8_UNORM)
	ENTRY(IF_B8G8R8A8_UINT, VK_FORMAT_B8G8R8A8_UINT)
	ENTRY(IF_B8G8R8A8_SINT, VK_FORMAT_B8G8R8A8_SINT)
	ENTRY(IF_B8G8R8A8_SRGB, VK_FORMAT_B8G8R8A8_SRGB)
	ENTRY(IF_B8G8R8A8_UNORM, VK_FORMAT_B8G8R8A8_UNORM)
	ENTRY(IF_R16_UINT, VK_FORMAT_R16_UINT)
	ENTRY(IF_R16_SINT, VK_FORMAT_R16_SINT)
	ENTRY(IF_R16_SFLOAT, VK_FORMAT_R16_SFLOAT)
	ENTRY(IF_R16G16_UINT, VK_FORMAT_R16G16_UINT)
	ENTRY(IF_R16G16_SINT, VK_FORMAT_R16G16_SINT)
	ENTRY(IF_R16G16_SFLOAT, VK_FORMAT_R16G16_SFLOAT)
	ENTRY(IF_R16G16B16_UINT, VK_FORMAT_R16G16B16_UINT)
	ENTRY(IF_R16G16B16_SINT, VK_FORMAT_R16G16B16_SINT)
	ENTRY(IF_R16G16B16_SFLOAT, VK_FORMAT_R16G16B16_SFLOAT)
	ENTRY(IF_R16G16B16A16_UINT, VK_FORMAT_R16G16B16A16_UINT)
	ENTRY(IF_R16G16B16A16_SINT, VK_FORMAT_R16G16B16A16_SINT)
	ENTRY(IF_R16G16B16A16_SFLOAT, VK_FORMAT_R16G16B16A16_SFLOAT)
	ENTRY(IF_R32_UINT, VK_FORMAT_R32_UINT)
	ENTRY(IF_R32_SINT, VK_FORMAT_R32_SINT)
	ENTRY(IF_R32_SFLOAT, VK_FORMAT_R32_SFLOAT)
	ENTRY(IF_R32G32_UINT, VK_FORMAT_R32G32_UINT)
	ENTRY(IF_R32G32_SINT, VK_FORMAT_R32G32_SINT)
	ENTRY(IF_R32G32_SFLOAT, VK_FORMAT_R32G32_SFLOAT)
	ENTRY(IF_R32G32B32_UINT, VK_FORMAT_R32G32B32_UINT)
	ENTRY(IF_R32G32B32_SINT, VK_FORMAT_R32G32B32_SINT)
	ENTRY(IF_R32G32B32_SFLOAT, VK_FORMAT_R32G32B32_SFLOAT)
	ENTRY(IF_R32G32B32A32_UINT, VK_FORMAT_R32G32B32A32_UINT)
	ENTRY(IF_R32G32B32A32_SINT, VK_FORMAT_R32G32B32A32_SINT)
	ENTRY(IF_R32G32B32A32_SFLOAT, VK_FORMAT_R32G32B32A32_SFLOAT)
	/*VK_FORMAT_R64_UINT,
	VK_FORMAT_R64_SINT,
	VK_FORMAT_R64_SFLOAT,
	VK_FORMAT_R64G64_UINT,
	VK_FORMAT_R64G64_SINT,
	VK_FORMAT_R64G64_SFLOAT,
	VK_FORMAT_R64G64B64_UINT,
	VK_FORMAT_R64G64B64_SINT,
	VK_FORMAT_R64G64B64_SFLOAT,
	VK_FORMAT_R64G64B64A64_UINT,
	VK_FORMAT_R64G64B64A64_SINT,
	VK_FORMAT_R64G64B64A64_SFLOAT,*/
	ENTRY(IF_D16_UNORM, VK_FORMAT_D16_UNORM)
	ENTRY(IF_D24_UNORM_S8_UINT, VK_FORMAT_D24_UNORM_S8_UINT)
	ENTRY(IF_D32_SFLOAT, VK_FORMAT_D32_SFLOAT)
	ENTRY(IF_S8_UINT, VK_FORMAT_S8_UINT)
	ENTRY(IF_D32_SFLOAT_S8_UINT, VK_FORMAT_D32_SFLOAT_S8_UINT)
};

class VulkanDevice;

class VulkanImage : public GLImage
{
public:
	VkImage Image;
	VkImageView ImageView;
	VkDeviceMemory Memory;
	VkImageLayout Layout;
	VkPipelineStageFlags Stage;

	VulkanImage(VulkanDevice& Device 
		, VkImage Image
		, VkDeviceMemory Memory
		, VkImageLayout Layout
		, EImageFormat Format
		, uint32 Width
		, uint32 Height
		, EResourceUsageFlags UsageFlags
		, VkPipelineStageFlags Stage = VK_PIPELINE_STAGE_TOP_OF_PIPE_BIT);

	virtual void ReleaseGL() final;

	operator VkImage();
	static bool IsDepthLayout(VkImageLayout Layout);
	bool IsInDepthLayout();
	VkFormat GetVulkanFormat() const;
	VkImageAspectFlags GetVulkanAspect();

private:
	VulkanDevice& Device;
};

CLASS(VulkanImage);